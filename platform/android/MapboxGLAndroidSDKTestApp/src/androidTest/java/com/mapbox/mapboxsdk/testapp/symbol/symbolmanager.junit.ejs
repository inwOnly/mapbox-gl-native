<%
  const type = locals.type;
  const properties = locals.properties;
-%>
// This file is generated. Edit android/platform/scripts/generate-style-code.js, then run `make android-style-code`.

package com.mapbox.mapboxsdk.testapp.symbol;

import android.support.test.runner.AndroidJUnit4;

import com.mapbox.mapboxsdk.geometry.LatLng;
import com.mapbox.mapboxsdk.symbol.Symbol;
import com.mapbox.mapboxsdk.symbol.SymbolManager;
import timber.log.Timber;

import com.mapbox.mapboxsdk.testapp.activity.BaseActivityTest;

import org.junit.Test;
import org.junit.runner.RunWith;

import static com.mapbox.mapboxsdk.testapp.action.MapboxMapAction.invoke;
import static org.junit.Assert.*;
import static com.mapbox.mapboxsdk.style.layers.Property.*;

import com.mapbox.mapboxsdk.testapp.activity.espresso.EspressoTestActivity;

/**
 * Basic smoke tests for <%- camelize(type) %>Manager
 */
@RunWith(AndroidJUnit4.class)
public class <%- camelize(type) %>ManagerTest extends BaseActivityTest {

  private SymbolManager symbolManager;

  @Override
  protected Class getActivityClass() {
    return EspressoTestActivity.class;
  }

  private void setupSymbolManager() {
    Timber.i("Retrieving layer");
    invoke(mapboxMap, (uiController, mapboxMap) -> {
      symbolManager = new SymbolManager(mapboxMap);
    });
  }
<% for (const property of properties) { -%>
<% if (!supportsPropertyFunction(property)) { -%>

  @Test
  public void test<%- camelize(property.name) %>AsConstant() {
    validateTestSetup();
    setupSymbolManager();
    Timber.i("<%- property.name %>");
    invoke(mapboxMap, (uiController, mapboxMap) -> {
      assertNotNull(symbolManager);

      symbolManager.set<%- camelize(property.name) %>(<%- defaultValueJava(property) %>);
      assertEquals((<%- propertyType(property) %>) symbolManager.get<%- camelize(property.name) %>(), (<%- propertyType(property) %>) <%- defaultValueJava(property) %>);
    });
  }
<% } -%>
<% } -%>
}
